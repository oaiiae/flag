image: golang:1.23

stages:
    - test
    - build
    - deploy

workflow:
    rules:
        - if: $CI_COMMIT_TAG_MESSAGE && $CI_COMMIT_TAG =~ /^v\d+(\.\d+)*$/
        - if: $CI_COMMIT_TAG_MESSAGE && $CI_COMMIT_TAG =~ /^v\d+(\.\d+)*-rc\.\d+$/
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        - if: $CI_COMMIT_BRANCH

.go-cache:
    cache:
        paths:
            - vendor/
        key:
            files:
                - go.mod
        policy: pull

deps:
    stage: .pre
    extends: .go-cache
    cache:
        policy: pull-push
    script:
        - go get -t ./...
        - go mod vendor

lint:
    image: golangci/golangci-lint:latest
    stage: test
    extends: .go-cache
    script:
        - golangci-lint run -v

coverage:
    stage: test
    extends: .go-cache
    before_script:
        - go install github.com/t-yuki/gocover-cobertura@latest
    script:
        - go test -coverprofile=c.out ./cli ./values
        - go tool cover -func=c.out
        - gocover-cobertura < c.out > cobertura-coverage.xml
    coverage: '/\(statements\)(?:\s+)?(\d+(?:\.\d+)?%)/'
    artifacts:
        reports:
            coverage_report:
                coverage_format: cobertura
                path: cobertura-coverage.xml

race:
    stage: test
    extends: .go-cache
    script:
        - go test -race ./cli ./values
